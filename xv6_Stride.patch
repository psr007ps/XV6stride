diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/proc.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/proc.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/proc.c"	2019-10-16 03:07:13.693034700 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/proc.c"	2019-11-10 20:41:11.631039000 -0800
@@ -89,6 +89,9 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;
+  p->pass = 0;
+  p->stride = 10000 / p->tickets;
 
   release(&ptable.lock);
 
@@ -230,8 +233,35 @@
 {
   struct proc *curproc = myproc();
   struct proc *p;
+  
   int fd;
 
+  /*-------The following code is added to format the output--------*/
+  /* NOTE that you need to replace sched_times in the cprintf with whatever you use to record the execution time */
+  static char *states[] = {
+  [UNUSED]    "unused",
+  [EMBRYO]    "embryo",
+  [SLEEPING]  "sleep ",
+  [RUNNABLE]  "runble",
+  [RUNNING]   "run   ",
+  [ZOMBIE]    "zombie"
+  };
+  char *state;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED)
+      continue;
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+      state = states[p->state];
+    else
+      state = "???";
+    cprintf("From  %s-%d: %d %s %s sched_times=%d ticket=%d stride=%d \n", myproc()->name, myproc()->pid, p->pid, state, p->name, p->usage, p->tickets, p->stride);
+    //cprintf("From  %s-%d: %d %s %s tickets=%d stride=%d #timeSlices=%d \n", myproc()->name, myproc()->pid, p->pid, state, p->name, p->tickets, p->stride, p->usage);
+  }
+  /*------------------patch end------------------------ */
+
+
+
+
   if(curproc == initproc)
     panic("init exiting");
 
@@ -320,17 +350,22 @@
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+//author: Pranshu Shrivastava
+//Stride Scheduler
 void
 scheduler(void)
 {
   struct proc *p;
+  struct proc *current;
   struct cpu *c = mycpu();
   c->proc = 0;
   
+  
+  
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
+    int minPass = -1;
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
 	
@@ -338,22 +373,36 @@
 		
       if(p->state != RUNNABLE)
         continue;
+      if (minPass < 0 || p->pass < minPass){
+      	current = p;
+				minPass = p->pass;
+			}
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
+    }
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+		
+      if(p->state != RUNNABLE)
+        continue;
 
+      if (p->pass==minPass){
+        current=p;
+        c->proc=current;
+        current->pass += current->stride;
+        switchuvm(current);
+        current->state = RUNNING;
+        current->usage = current->usage+1;
+        swtch(&(c->scheduler), p->context);
+        switchkvm();
+      
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      break;
+      }
     }
-	
     release(&ptable.lock);
 
   }
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/proc.h" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/proc.h"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/proc.h"	2019-10-11 21:56:58.782976500 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/proc.h"	2019-11-09 15:08:25.317111000 -0800
@@ -34,7 +34,7 @@
 };
 
 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
-
+int totalTickets;
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
@@ -50,6 +50,10 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
+  int usage;
+  int stride;
+  int pass;
   
 };
 
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/strideTest1.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/strideTest1.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/strideTest1.c"	1969-12-31 16:00:00.000000000 -0800
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/strideTest1.c"	2019-11-10 19:06:07.998327700 -0800
@@ -0,0 +1,60 @@
+// This test case is designed for lottery scheduler
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+
+int main(int argc, char *argv[])
+{
+
+    int Scheduler(void);
+
+    Scheduler();
+    return 0;
+}
+
+int Scheduler(void)
+{
+
+    int pid;
+    int i, j, k;
+
+    /*Replace YOUR_SYSCALL_TO_ASSIGN_TICKET with what you implement to assign ticket */
+    settickets(60);
+    for (i = 0; i < 3; i++)
+    {
+        pid = fork();
+        if (pid > 0)
+        {
+            continue;
+        }
+        else if (pid == 0)
+        {
+
+            settickets(30 - 10 * i);
+            for (j = 0; j < 50000; j++)
+            {
+                for (k = 0; k < 50000; k++)
+                {
+                    asm("nop");
+                }
+            }
+            printf(1, "\n  child# %d with %d tickets has finished!  \n", getpid(), 30 - 10 * i);
+            exit();
+        }
+        else
+        {
+            printf(2, "  \n  Error  \n ");
+        }
+    }
+
+    if (pid > 0)
+    {
+        for (i = 0; i < 3; i++)
+        {
+            wait();
+        }
+    }
+    exit();
+    return 0;
+}
\ No newline at end of file
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/strideTest2.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/strideTest2.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/strideTest2.c"	1969-12-31 16:00:00.000000000 -0800
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/strideTest2.c"	2019-11-09 04:10:48.673519800 -0800
@@ -0,0 +1,19 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+int main(int argc, char *argv[])
+{
+ settickets(20); // write your own function here
+ 
+ int i,k;
+ const int loop=43000;
+ for(i=0;i<loop;i++)
+ {
+ //asm(nop); //in order to prevent the compiler from optimizing the for loop
+ for(k=0;k<loop;k++)
+ {
+ //asm(nop);
+ }
+ }
+ exit();
+}
\ No newline at end of file
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/strideTest3.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/strideTest3.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/strideTest3.c"	1969-12-31 16:00:00.000000000 -0800
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/strideTest3.c"	2019-11-09 04:10:39.525167900 -0800
@@ -0,0 +1,19 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+int main(int argc, char *argv[])
+{
+ settickets(10); // write your own function here
+ 
+ int i,k;
+ const int loop=43000;
+ for(i=0;i<loop;i++)
+ {
+ //asm(nop); //in order to prevent the compiler from optimizing the for loop
+ for(k=0;k<loop;k++)
+ {
+ //asm(nop);
+ }
+ }
+ exit();
+}
\ No newline at end of file
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/syscall.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/syscall.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/syscall.c"	2019-10-16 00:21:15.582414300 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/syscall.c"	2019-11-09 15:13:55.247827300 -0800
@@ -106,6 +106,8 @@
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_info(void);
+extern int sys_settickets(void);
+extern int sys_getusage(void);
 
 
 static int (*syscalls[])(void) = {
@@ -131,7 +133,8 @@
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_info]   sys_info,
-
+[SYS_settickets] sys_settickets,
+[SYS_getusage] sys_getusage,
 };
 
 
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/syscall.h" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/syscall.h"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/syscall.h"	2019-10-16 00:01:53.210446700 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/syscall.h"	2019-11-09 15:10:58.009269200 -0800
@@ -21,4 +21,6 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_info  22
+#define SYS_settickets 23
+#define SYS_getusage 24
 
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/sysproc.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/sysproc.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/sysproc.c"	2019-10-16 00:43:44.424809600 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/sysproc.c"	2019-11-09 15:28:08.639677900 -0800
@@ -129,5 +129,22 @@
 
 
 
+int
+sys_settickets(void) {
+  int tix;
+  if(argint(0, &tix) < 0)
+  	{return -1;}
+	myproc()->tickets = tix;
+	myproc()->stride = 10000 / tix;
+	return 0;
+}
+
+int
+sys_getusage(void) {
+  return myproc()->usage;
+}
+
+
+
 
 
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/user.h" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/user.h"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/user.h"	2019-10-16 00:03:15.799294900 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Stride/xv6-public/user.h"	2019-11-09 15:14:15.520777000 -0800
@@ -24,6 +24,8 @@
 int sleep(int);
 int uptime(void);
 int info(int);
+int settickets(int);
+int getusage(void);
 
 
 // ulib.c
